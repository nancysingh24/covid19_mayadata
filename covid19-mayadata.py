# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kQikVP9ndMwidYFoDx2bOsEmbLhYSiVl
"""

!pip install calmap
!pip install chart_studio
!pip install plotly-geo

from google.colab import drive
drive.mount('/content/gdrive')

!ls "/content/gdrive/My Drive/usa_county_wise.csv"

import chart_studio
#API KEY 
username = 'jatins'
api_key = 'ZeezwRMdl79LdkA45Tcy'
chart_studio.tools.set_credentials_file(username=username, api_key=api_key)
# W1Qor7JU3YzGZkHwqCvT



# Commented out IPython magic to ensure Python compatibility.
#Import necessary packages

import numpy as np # linear algebra
import pandas as pd # data processing
import requests
import json

#Visualization Libraries

import plotly.express as px
import plotly.graph_objs as go
import plotly.io as pio
import matplotlib.pyplot as plt
import seaborn as sns
import folium
import calmap


from IPython.core.display import HTML

# %matplotlib inline
pio.templates.default = "plotly_dark"

#New York Times GitHub Data
nyturl = 'https://api.github.com/repos/nytimes/covid-19-data/contents'
r = requests.get(nyturl)
if(r.ok):
    repo = json.loads(r.text or r.content)
    
repo[2]

d = {}

for i in range(len(repo)):
    htmlurl = repo[i]['download_url']
    name = repo[i]['name']
    if name.find(".csv") != -1:
        tempdf = pd.read_csv(htmlurl)
        d["df_" + name] = tempdf
        
d.keys()

#Read data
df = pd.read_csv("/content/gdrive/My Drive/covid_19_clean_complete.csv")
US = pd.read_csv("/content/gdrive/My Drive/usa_county_wise.csv")
nyt_us_counties = d['df_us-counties.csv']
nyt_us_states = d['df_us-states.csv']

#Clean Data & Change data types 

df['Date'] = pd.to_datetime(df['Date'])
US['Date'] = pd.to_datetime(US['Date'])

#Create Variables

df['Active'] = df['Confirmed'] - df['Deaths'] - df['Recovered']
US['Active'] = US['Confirmed'] - US['Deaths']

US.info()

#Number for Countries affected over time

dfpivot = df.pivot_table(index = 'Country/Region', columns = 'Date', values = ['Confirmed'])

countrycount =  dfpivot.groupby("Country/Region").sum().apply(lambda x: x[x > 0].count(), axis =0)
countrycount = pd.DataFrame(countrycount)

countrycount.reset_index(inplace = True)
countrycount.columns = ["Metric", "Date", "Count"]


#Animated Line Chart
trace = go.Scatter(x=countrycount['Date'][0:2], y=countrycount['Count'][0:2],
                         mode = 'markers', line = dict(width = 2))

frames = [dict(data = [dict(type = 'scatter', x= countrycount['Date'][:k+1], y = countrycount['Count'][:k+1])],
               traces = [0,1], 
               ) for k in range(1, len(countrycount) - 1)
         ]
    
layout = go.Layout(width = 600, 
                   height = 440, 
                   showlegend = False, hovermode = 'closest', 
                    updatemenus=[dict(type='buttons', showactive=False,
                                y=1.05,
                                x=1.15,
                                xanchor='right',
                                yanchor='top',
                                pad=dict(t=0, r=10),
                                buttons=[dict(label='Play',
                                              method='animate',
                                              args=[None, 
                                                    dict(frame=dict(duration=30, 
                                                                    redraw=False),
                                                         transition=dict(duration=0),
                                                         fromcurrent=True,
                                                         mode='immediate')])])])
      

layout.update(xaxis =dict(range=[countrycount.Date[0], countrycount.Date[len(countrycount)-1]], 
                          autorange=False, showgrid = True, showline = True,
                          showticklabels=True,
                          linecolor = 'rgb(204, 204, 204)', 
                          linewidth = 2
                         ),
              yaxis =dict(range=[min(countrycount.Count)-10, max(countrycount.Count)+20], 
                          autorange=False, showline = True,
                          showticklabels=True,
                          linecolor = 'rgb(204, 204, 204)', 
                          linewidth = 2
                         ), 
              title = "Number Of Countries Affected Over Time"
             );
fig = go.Figure(data=[trace], frames=frames, layout=layout)

fig.show()


import chart_studio.plotly as py
py.plot(fig, filename = 'countries-affected-over-time', auto_open=True)

#Visualize Count Data

#Get latest data
dflatest = df[df['Date'] == max(df['Date'])]

#Aggregate Values
grouped = dflatest.groupby('Country/Region')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum()
summary = grouped.sort_values(by = 'Confirmed', ascending = False).reset_index()

#Custom formatting
summary.style.background_gradient(cmap= 'Blues', subset = ['Confirmed'])\
             .background_gradient(cmap= 'Reds', subset = ['Deaths'])\
             .background_gradient(cmap= 'Greens', subset = ['Recovered'])\
             .background_gradient(cmap = 'Oranges', subset = ['Active'])

#Function for trend plot
def trendplot(data, xaxis, lables, title, line_size, mode_size, colors):
    fig = go.Figure()

    for i in range(len(labels)):
        fig.add_trace(go.Scatter(x=data[xaxis], y=data[labels[i]], mode='lines+markers',
            name=labels[i],
            line=dict(color=colors[i], width=line_size[i]),
            connectgaps=True
        ))

    fig.update_layout(
        xaxis = dict(
                showline = True, 
                showgrid = True, 
                showticklabels = True,
                linecolor = 'rgb(204, 204, 204)', 
                linewidth = 2, 
        ticks = 'inside'), 

        yaxis=dict(
            showgrid=True,
            zeroline=False,
            showline=False,
            showticklabels=True,
            linecolor = 'rgb(204, 204, 204)', 
            linewidth = 2
        ),

        autosize = True, 
        title = title, 
        hovermode = 'x'

    )
    fig.show()
    return fig

#World Trend Plot
worldsummary = df.groupby('Date')['Confirmed', 'Deaths', 'Recovered', 'Active'].sum().reset_index() 

xaxis = 'Date'
title = 'World Trend'
labels = ['Confirmed', 'Deaths', 'Recovered', 'Active']
colors = ['#51C1F9', '#FF4B4B', '#2ECC71', '#ECF0F1']
mode_size = [1,1,1,1]
line_size = [3,3,3,3]  

figtrend = trendplot(data = worldsummary, xaxis = xaxis, 
          lables = labels, title = title, 
          line_size = line_size, mode_size = mode_size, 
          colors = colors)

import plotly.io as pio
pio.write_html(figtrend, file="worldtrend.html", auto_open=True)

# World Folium Map

world_map = folium.Map(location=[10,0], tiles="cartodbpositron", zoom_start=2,max_zoom=6,min_zoom=2)
for i in range(0,len(dflatest)):
    folium.Circle(
        location=[dflatest.iloc[i]['Lat'], dflatest.iloc[i]['Long']],
        tooltip = "<h5 style='text-align:center;font-weight: bold'>"+dflatest.iloc[i]['Country/Region']+"</h5>"+
                    "<div style='text-align:center;'>"+str(np.nan_to_num(dflatest.iloc[i]['Province/State']))+"</div>"+
                    "<hr style='margin:10px;'>"+
                    "<ul style='color: #444;list-style-type:circle;align-item:left;padding-left:20px;padding-right:20px'>"+
        "<li>Confirmed: "+str(dflatest.iloc[i]['Confirmed'])+"</li>"+
        "<li>Deaths:   "+str(dflatest.iloc[i]['Deaths'])+"</li>"+
        "</ul>"
        ,
        radius= np.log(dflatest.iloc[i]['Confirmed']+1.001)*50000,
        color='#ff6600',
        fill_color='#ff8533',
        fill_opacity = 0.1,
        fill=True).add_to(world_map)

world_map

